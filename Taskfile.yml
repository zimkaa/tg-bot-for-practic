version: "3"

# dotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']

tasks:
  default:
    - task: help

  help:
    desc: "List all tasks"
    silent: true
    cmds:
      - task --list-all

  generate-pre-commit-config:
    desc: "Generate .pre-commit-config.yaml file from .pre-commit-config.yaml.template"
    silent: true
    preconditions:
      - test -f .pre-commit-config.yaml.template
    generates:
      - .pre-commit-config.yaml
    env:
      PRE_COMMIT_ADDITIONAL_DEPENDENCIES:
        sh: echo "$(poetry export --with dev --without-hashes | while read line; do echo "          - $(echo ${line} | sed "s/^[[:space:]]*//")"; done)"
    cmds:
      - envsubst < .pre-commit-config.yaml.template > .pre-commit-config.yaml
      - echo "The .pre-commit-config.yaml file has been generated."

  install-pre-commit-config:
    desc: "Install pre-commit with generated .pre-commit-config.yaml"
    cmds:
      - pre-commit install
      - poetry update
      - task generate-pre-commit-config
      - pre-commit autoupdate
      - echo "The pre-commit installed and updated."

  update-pre-commit-config:
    desc: "Update versions .pre-commit-config.yaml and poetry update"
    cmds:
      - poetry update
      - pre-commit autoupdate
      - echo "The pre-commit updated."

  lint:
    desc: "Run pre-commit run --all-files"
    preconditions:
      - test -f .pre-commit-config.yaml
    cmds:
      - pre-commit run --all-files

  run-local-test-bot:
    desc: Run telegram bot locally
    cmds:
      - python -m src

  build-version:
    desc: "Generate version. Example for generate production version: task build-version -- -p"
    env:
      APP_VERSION:
        sh: python -m src.config.builder {{.CLI_ARGS}}
      APP_NAME:
        sh: python -m src.config.get_name
    cmds:
      - sed -i '.bak' -e "s/^APP_VERSION=.*/APP_VERSION=${APP_VERSION}/; s/^APP_NAME=.*/APP_NAME=${APP_NAME}/" build_version
      - echo "build version set up APP_VERSION=${APP_VERSION} APP_NAME=${APP_NAME}"

  build-docker-bot-without-run:
    desc: "Build docker container telegram bot Example: task build-docker-bot-without-run -- '-p'"
    cmds:
      - task build-version -- {{.CLI_ARGS}}
      - docker compose -f docker-compose-dev.yaml --env-file build_version create --build

  push-docker-container:
    desc: "Push docker container to docker hub"
    cmds:
      - docker image push --all-tags zimkaa/sales_bot

  run-docker-bot:
    desc: Run docker container telegram bot
    cmds:
      - docker compose -f docker-compose-dev.yaml --env-file .dev.env up -d

  stop-docker-bot:
    desc: Stop docker container telegram bot
    cmds:
      - docker compose -f docker-compose-dev.yaml down

  # test:
  #   desc: Run tests
  #   cmds:
  #     - python -m coverage run
  #     - python -m coverage report -m
  #     - python -m coverage html

  file-id-bot:
    desc: Run file_id sender locally
    cmds:
      - python ./get_file_id_for_bot.py

  user-id-bot:
    desc: Run user id sender locally
    cmds:
      - python ./get_user_id.py

  test-deploy:
    desc: Deploy locally
    cmds:
      # - act -j 'docker-build-push' --container-architecture linux/amd64 --var-file .vars --secret-file .secrets -e event.json
      - act --container-architecture linux/amd64 --var-file .vars --secret-file .secrets -e event.json

  run-build-container:
    desc: Run locally container
    dotenv: ['build_version']
    cmds:
      - docker run --platform linux/amd64 --env-file .dev.env --name "${APP_NAME}-${APP_VERSION}" -d "zimkaa/${APP_NAME}:${APP_VERSION}"
